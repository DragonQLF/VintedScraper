generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  name           String?
  discordWebhookUrl String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  actions        Action[]
  notifications  Notification[]
  searchProfiles SearchProfile[]
}

model Brand {
  id             Int             @id
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  searchProfiles SearchProfile[]
}

model SearchProfile {
  id              String      @id @default(uuid())
  name            String
  keywords        String?
  minPrice        Float?
  maxPrice        Float?
  size            String?
  condition       String?
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String
  catalog         String?
  catalogId       String?
  category        String?
  clothingSize    String?
  clothingType    String?
  color           String?
  gender          String?
  material        String?
  pattern         String?
  season          String?
  shippingCountry String?
  shoeSize        String?
  shoeSizeSystem  String?
  status          String      @default("active")
  style           String?
  subcategory     String?
  brandId         Int?
  priority        String      @default("MEDIUM")
  autoActions     AutoAction?
  matches         Match[]
  brand           Brand?      @relation(fields: [brandId], references: [id])
  user            User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([brandId])
}

model AutoAction {
  id              String        @id @default(uuid())
  autoFavorite    Boolean       @default(false)
  autoOffer       Boolean       @default(false)
  autoOfferPrice  Float?
  autoBuy         Boolean       @default(false)
  searchProfileId String        @unique
  searchProfile   SearchProfile @relation(fields: [searchProfileId], references: [id], onDelete: Cascade)
}

model Match {
  id              String         @id @default(uuid())
  listingId       String
  title           String
  price           Float
  imageUrls       String
  productUrl      String
  size            String?
  brand           String?
  condition       String?
  sellerRating    Float?
  searchProfileId String
  createdAt       DateTime       @default(now())
  status          String         @default("available")
  updatedAt       DateTime       @updatedAt
  likes           Int            @default(0)
  totalPrice      Float?
  matchedAt       DateTime       @default(now())
  actions         Action[]
  searchProfile   SearchProfile  @relation(fields: [searchProfileId], references: [id], onDelete: Cascade)
  notifications   Notification[]
  priceHistory    PriceHistory[]

  @@unique([listingId, searchProfileId])
  @@index([searchProfileId], map: "Match_searchProfileId_fkey")
}

model PriceHistory {
  id        String   @id @default(uuid())
  price     Float
  timestamp DateTime @default(now())
  matchId   String
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@index([matchId])
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  matchId   String?
  details   String?
  match     Match?   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([matchId], map: "Notification_matchId_fkey")
  @@index([userId], map: "Notification_userId_fkey")
}

model Action {
  id        String   @id @default(uuid())
  type      String
  createdAt DateTime @default(now())
  userId    String
  matchId   String
  price     Float?
  status    String
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([matchId], map: "Action_matchId_fkey")
  @@index([userId], map: "Action_userId_fkey")
}
